/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.dnebinger.subsystem.events.service.base;

import aQute.bnd.annotation.ProviderType;

import com.dnebinger.subsystem.events.model.EventAttendee;
import com.dnebinger.subsystem.events.service.EventAttendeeLocalService;
import com.dnebinger.subsystem.events.service.persistence.EventAttendeePersistence;
import com.dnebinger.subsystem.events.service.persistence.EventPersistence;
import com.dnebinger.subsystem.events.service.persistence.RelatedEventPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the event attendee local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.dnebinger.subsystem.events.service.impl.EventAttendeeLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.dnebinger.subsystem.events.service.impl.EventAttendeeLocalServiceImpl
 * @see com.dnebinger.subsystem.events.service.EventAttendeeLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class EventAttendeeLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements EventAttendeeLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.dnebinger.subsystem.events.service.EventAttendeeLocalServiceUtil} to access the event attendee local service.
	 */

	/**
	 * Adds the event attendee to the database. Also notifies the appropriate model listeners.
	 *
	 * @param eventAttendee the event attendee
	 * @return the event attendee that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public EventAttendee addEventAttendee(EventAttendee eventAttendee) {
		eventAttendee.setNew(true);

		return eventAttendeePersistence.update(eventAttendee);
	}

	/**
	 * Creates a new event attendee with the primary key. Does not add the event attendee to the database.
	 *
	 * @param surrogateId the primary key for the new event attendee
	 * @return the new event attendee
	 */
	@Override
	public EventAttendee createEventAttendee(long surrogateId) {
		return eventAttendeePersistence.create(surrogateId);
	}

	/**
	 * Deletes the event attendee with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param surrogateId the primary key of the event attendee
	 * @return the event attendee that was removed
	 * @throws PortalException if a event attendee with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public EventAttendee deleteEventAttendee(long surrogateId)
		throws PortalException {
		return eventAttendeePersistence.remove(surrogateId);
	}

	/**
	 * Deletes the event attendee from the database. Also notifies the appropriate model listeners.
	 *
	 * @param eventAttendee the event attendee
	 * @return the event attendee that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public EventAttendee deleteEventAttendee(EventAttendee eventAttendee) {
		return eventAttendeePersistence.remove(eventAttendee);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(EventAttendee.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return eventAttendeePersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.dnebinger.subsystem.events.model.impl.EventAttendeeModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return eventAttendeePersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.dnebinger.subsystem.events.model.impl.EventAttendeeModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return eventAttendeePersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return eventAttendeePersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return eventAttendeePersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public EventAttendee fetchEventAttendee(long surrogateId) {
		return eventAttendeePersistence.fetchByPrimaryKey(surrogateId);
	}

	/**
	 * Returns the event attendee with the primary key.
	 *
	 * @param surrogateId the primary key of the event attendee
	 * @return the event attendee
	 * @throws PortalException if a event attendee with the primary key could not be found
	 */
	@Override
	public EventAttendee getEventAttendee(long surrogateId)
		throws PortalException {
		return eventAttendeePersistence.findByPrimaryKey(surrogateId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(eventAttendeeLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(EventAttendee.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("surrogateId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(eventAttendeeLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(EventAttendee.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("surrogateId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(eventAttendeeLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(EventAttendee.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("surrogateId");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return eventAttendeeLocalService.deleteEventAttendee((EventAttendee)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return eventAttendeePersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the event attendees.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.dnebinger.subsystem.events.model.impl.EventAttendeeModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of event attendees
	 * @param end the upper bound of the range of event attendees (not inclusive)
	 * @return the range of event attendees
	 */
	@Override
	public List<EventAttendee> getEventAttendees(int start, int end) {
		return eventAttendeePersistence.findAll(start, end);
	}

	/**
	 * Returns the number of event attendees.
	 *
	 * @return the number of event attendees
	 */
	@Override
	public int getEventAttendeesCount() {
		return eventAttendeePersistence.countAll();
	}

	/**
	 * Updates the event attendee in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param eventAttendee the event attendee
	 * @return the event attendee that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public EventAttendee updateEventAttendee(EventAttendee eventAttendee) {
		return eventAttendeePersistence.update(eventAttendee);
	}

	/**
	 * Returns the event local service.
	 *
	 * @return the event local service
	 */
	public com.dnebinger.subsystem.events.service.EventLocalService getEventLocalService() {
		return eventLocalService;
	}

	/**
	 * Sets the event local service.
	 *
	 * @param eventLocalService the event local service
	 */
	public void setEventLocalService(
		com.dnebinger.subsystem.events.service.EventLocalService eventLocalService) {
		this.eventLocalService = eventLocalService;
	}

	/**
	 * Returns the event persistence.
	 *
	 * @return the event persistence
	 */
	public EventPersistence getEventPersistence() {
		return eventPersistence;
	}

	/**
	 * Sets the event persistence.
	 *
	 * @param eventPersistence the event persistence
	 */
	public void setEventPersistence(EventPersistence eventPersistence) {
		this.eventPersistence = eventPersistence;
	}

	/**
	 * Returns the event attendee local service.
	 *
	 * @return the event attendee local service
	 */
	public EventAttendeeLocalService getEventAttendeeLocalService() {
		return eventAttendeeLocalService;
	}

	/**
	 * Sets the event attendee local service.
	 *
	 * @param eventAttendeeLocalService the event attendee local service
	 */
	public void setEventAttendeeLocalService(
		EventAttendeeLocalService eventAttendeeLocalService) {
		this.eventAttendeeLocalService = eventAttendeeLocalService;
	}

	/**
	 * Returns the event attendee persistence.
	 *
	 * @return the event attendee persistence
	 */
	public EventAttendeePersistence getEventAttendeePersistence() {
		return eventAttendeePersistence;
	}

	/**
	 * Sets the event attendee persistence.
	 *
	 * @param eventAttendeePersistence the event attendee persistence
	 */
	public void setEventAttendeePersistence(
		EventAttendeePersistence eventAttendeePersistence) {
		this.eventAttendeePersistence = eventAttendeePersistence;
	}

	/**
	 * Returns the related event local service.
	 *
	 * @return the related event local service
	 */
	public com.dnebinger.subsystem.events.service.RelatedEventLocalService getRelatedEventLocalService() {
		return relatedEventLocalService;
	}

	/**
	 * Sets the related event local service.
	 *
	 * @param relatedEventLocalService the related event local service
	 */
	public void setRelatedEventLocalService(
		com.dnebinger.subsystem.events.service.RelatedEventLocalService relatedEventLocalService) {
		this.relatedEventLocalService = relatedEventLocalService;
	}

	/**
	 * Returns the related event persistence.
	 *
	 * @return the related event persistence
	 */
	public RelatedEventPersistence getRelatedEventPersistence() {
		return relatedEventPersistence;
	}

	/**
	 * Sets the related event persistence.
	 *
	 * @param relatedEventPersistence the related event persistence
	 */
	public void setRelatedEventPersistence(
		RelatedEventPersistence relatedEventPersistence) {
		this.relatedEventPersistence = relatedEventPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("com.dnebinger.subsystem.events.model.EventAttendee",
			eventAttendeeLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"com.dnebinger.subsystem.events.model.EventAttendee");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return EventAttendeeLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return EventAttendee.class;
	}

	protected String getModelClassName() {
		return EventAttendee.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = eventAttendeePersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.dnebinger.subsystem.events.service.EventLocalService.class)
	protected com.dnebinger.subsystem.events.service.EventLocalService eventLocalService;
	@BeanReference(type = EventPersistence.class)
	protected EventPersistence eventPersistence;
	@BeanReference(type = EventAttendeeLocalService.class)
	protected EventAttendeeLocalService eventAttendeeLocalService;
	@BeanReference(type = EventAttendeePersistence.class)
	protected EventAttendeePersistence eventAttendeePersistence;
	@BeanReference(type = com.dnebinger.subsystem.events.service.RelatedEventLocalService.class)
	protected com.dnebinger.subsystem.events.service.RelatedEventLocalService relatedEventLocalService;
	@BeanReference(type = RelatedEventPersistence.class)
	protected RelatedEventPersistence relatedEventPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}