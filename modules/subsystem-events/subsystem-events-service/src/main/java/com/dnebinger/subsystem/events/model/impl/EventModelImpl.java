/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.dnebinger.subsystem.events.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.dnebinger.subsystem.events.model.Event;
import com.dnebinger.subsystem.events.model.EventModel;
import com.dnebinger.subsystem.events.model.EventSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Event service. Represents a row in the &quot;SUBSYS_Event&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link EventModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EventImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EventImpl
 * @see Event
 * @see EventModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class EventModelImpl extends BaseModelImpl<Event> implements EventModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a event model instance should use the {@link Event} interface instead.
	 */
	public static final String TABLE_NAME = "SUBSYS_Event";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "eventId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "occursOn", Types.TIMESTAMP },
			{ "endsOn", Types.TIMESTAMP },
			{ "adultOnly", Types.BOOLEAN },
			{ "maxOccupants", Types.INTEGER },
			{ "description", Types.VARCHAR },
			{ "floor", Types.INTEGER },
			{ "room", Types.VARCHAR },
			{ "organizer", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("eventId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occursOn", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("endsOn", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("adultOnly", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("maxOccupants", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("floor", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("room", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("organizer", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table SUBSYS_Event (uuid_ VARCHAR(75) null,eventId LONG not null primary key,name VARCHAR(75) null,occursOn DATE null,endsOn DATE null,adultOnly BOOLEAN,maxOccupants INTEGER,description VARCHAR(75) null,floor INTEGER,room VARCHAR(75) null,organizer LONG)";
	public static final String TABLE_SQL_DROP = "drop table SUBSYS_Event";
	public static final String ORDER_BY_JPQL = " ORDER BY event.name ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SUBSYS_Event.name ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.dnebinger.subsystem.events.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.dnebinger.subsystem.events.model.Event"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.dnebinger.subsystem.events.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.dnebinger.subsystem.events.model.Event"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.dnebinger.subsystem.events.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.dnebinger.subsystem.events.model.Event"),
			true);
	public static final long NAME_COLUMN_BITMASK = 1L;
	public static final long UUID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Event toModel(EventSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Event model = new EventImpl();

		model.setUuid(soapModel.getUuid());
		model.setEventId(soapModel.getEventId());
		model.setName(soapModel.getName());
		model.setOccursOn(soapModel.getOccursOn());
		model.setEndsOn(soapModel.getEndsOn());
		model.setAdultOnly(soapModel.getAdultOnly());
		model.setMaxOccupants(soapModel.getMaxOccupants());
		model.setDescription(soapModel.getDescription());
		model.setFloor(soapModel.getFloor());
		model.setRoom(soapModel.getRoom());
		model.setOrganizer(soapModel.getOrganizer());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Event> toModels(EventSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Event> models = new ArrayList<Event>(soapModels.length);

		for (EventSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.dnebinger.subsystem.events.service.util.ServiceProps.get(
				"lock.expiration.time.com.dnebinger.subsystem.events.model.Event"));

	public EventModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _eventId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEventId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _eventId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Event.class;
	}

	@Override
	public String getModelClassName() {
		return Event.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("eventId", getEventId());
		attributes.put("name", getName());
		attributes.put("occursOn", getOccursOn());
		attributes.put("endsOn", getEndsOn());
		attributes.put("adultOnly", getAdultOnly());
		attributes.put("maxOccupants", getMaxOccupants());
		attributes.put("description", getDescription());
		attributes.put("floor", getFloor());
		attributes.put("room", getRoom());
		attributes.put("organizer", getOrganizer());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long eventId = (Long)attributes.get("eventId");

		if (eventId != null) {
			setEventId(eventId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		Date occursOn = (Date)attributes.get("occursOn");

		if (occursOn != null) {
			setOccursOn(occursOn);
		}

		Date endsOn = (Date)attributes.get("endsOn");

		if (endsOn != null) {
			setEndsOn(endsOn);
		}

		Boolean adultOnly = (Boolean)attributes.get("adultOnly");

		if (adultOnly != null) {
			setAdultOnly(adultOnly);
		}

		Integer maxOccupants = (Integer)attributes.get("maxOccupants");

		if (maxOccupants != null) {
			setMaxOccupants(maxOccupants);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Integer floor = (Integer)attributes.get("floor");

		if (floor != null) {
			setFloor(floor);
		}

		String room = (String)attributes.get("room");

		if (room != null) {
			setRoom(room);
		}

		Long organizer = (Long)attributes.get("organizer");

		if (organizer != null) {
			setOrganizer(organizer);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getEventId() {
		return _eventId;
	}

	@Override
	public void setEventId(long eventId) {
		_eventId = eventId;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask = -1L;

		if (_originalName == null) {
			_originalName = _name;
		}

		_name = name;
	}

	public String getOriginalName() {
		return GetterUtil.getString(_originalName);
	}

	@JSON
	@Override
	public Date getOccursOn() {
		return _occursOn;
	}

	@Override
	public void setOccursOn(Date occursOn) {
		_occursOn = occursOn;
	}

	@JSON
	@Override
	public Date getEndsOn() {
		return _endsOn;
	}

	@Override
	public void setEndsOn(Date endsOn) {
		_endsOn = endsOn;
	}

	@JSON
	@Override
	public boolean getAdultOnly() {
		return _adultOnly;
	}

	@JSON
	@Override
	public boolean isAdultOnly() {
		return _adultOnly;
	}

	@Override
	public void setAdultOnly(boolean adultOnly) {
		_adultOnly = adultOnly;
	}

	@JSON
	@Override
	public int getMaxOccupants() {
		return _maxOccupants;
	}

	@Override
	public void setMaxOccupants(int maxOccupants) {
		_maxOccupants = maxOccupants;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public int getFloor() {
		return _floor;
	}

	@Override
	public void setFloor(int floor) {
		_floor = floor;
	}

	@JSON
	@Override
	public String getRoom() {
		if (_room == null) {
			return StringPool.BLANK;
		}
		else {
			return _room;
		}
	}

	@Override
	public void setRoom(String room) {
		_room = room;
	}

	@JSON
	@Override
	public long getOrganizer() {
		return _organizer;
	}

	@Override
	public void setOrganizer(long organizer) {
		_organizer = organizer;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Event.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Event toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Event)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EventImpl eventImpl = new EventImpl();

		eventImpl.setUuid(getUuid());
		eventImpl.setEventId(getEventId());
		eventImpl.setName(getName());
		eventImpl.setOccursOn(getOccursOn());
		eventImpl.setEndsOn(getEndsOn());
		eventImpl.setAdultOnly(getAdultOnly());
		eventImpl.setMaxOccupants(getMaxOccupants());
		eventImpl.setDescription(getDescription());
		eventImpl.setFloor(getFloor());
		eventImpl.setRoom(getRoom());
		eventImpl.setOrganizer(getOrganizer());

		eventImpl.resetOriginalValues();

		return eventImpl;
	}

	@Override
	public int compareTo(Event event) {
		int value = 0;

		value = getName().compareTo(event.getName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Event)) {
			return false;
		}

		Event event = (Event)obj;

		long primaryKey = event.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		EventModelImpl eventModelImpl = this;

		eventModelImpl._originalUuid = eventModelImpl._uuid;

		eventModelImpl._originalName = eventModelImpl._name;

		eventModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Event> toCacheModel() {
		EventCacheModel eventCacheModel = new EventCacheModel();

		eventCacheModel.uuid = getUuid();

		String uuid = eventCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			eventCacheModel.uuid = null;
		}

		eventCacheModel.eventId = getEventId();

		eventCacheModel.name = getName();

		String name = eventCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			eventCacheModel.name = null;
		}

		Date occursOn = getOccursOn();

		if (occursOn != null) {
			eventCacheModel.occursOn = occursOn.getTime();
		}
		else {
			eventCacheModel.occursOn = Long.MIN_VALUE;
		}

		Date endsOn = getEndsOn();

		if (endsOn != null) {
			eventCacheModel.endsOn = endsOn.getTime();
		}
		else {
			eventCacheModel.endsOn = Long.MIN_VALUE;
		}

		eventCacheModel.adultOnly = getAdultOnly();

		eventCacheModel.maxOccupants = getMaxOccupants();

		eventCacheModel.description = getDescription();

		String description = eventCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			eventCacheModel.description = null;
		}

		eventCacheModel.floor = getFloor();

		eventCacheModel.room = getRoom();

		String room = eventCacheModel.room;

		if ((room != null) && (room.length() == 0)) {
			eventCacheModel.room = null;
		}

		eventCacheModel.organizer = getOrganizer();

		return eventCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", eventId=");
		sb.append(getEventId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", occursOn=");
		sb.append(getOccursOn());
		sb.append(", endsOn=");
		sb.append(getEndsOn());
		sb.append(", adultOnly=");
		sb.append(getAdultOnly());
		sb.append(", maxOccupants=");
		sb.append(getMaxOccupants());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", floor=");
		sb.append(getFloor());
		sb.append(", room=");
		sb.append(getRoom());
		sb.append(", organizer=");
		sb.append(getOrganizer());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("com.dnebinger.subsystem.events.model.Event");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventId</column-name><column-value><![CDATA[");
		sb.append(getEventId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>occursOn</column-name><column-value><![CDATA[");
		sb.append(getOccursOn());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endsOn</column-name><column-value><![CDATA[");
		sb.append(getEndsOn());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>adultOnly</column-name><column-value><![CDATA[");
		sb.append(getAdultOnly());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>maxOccupants</column-name><column-value><![CDATA[");
		sb.append(getMaxOccupants());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>floor</column-name><column-value><![CDATA[");
		sb.append(getFloor());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>room</column-name><column-value><![CDATA[");
		sb.append(getRoom());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>organizer</column-name><column-value><![CDATA[");
		sb.append(getOrganizer());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Event.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Event.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _eventId;
	private String _name;
	private String _originalName;
	private Date _occursOn;
	private Date _endsOn;
	private boolean _adultOnly;
	private int _maxOccupants;
	private String _description;
	private int _floor;
	private String _room;
	private long _organizer;
	private long _columnBitmask;
	private Event _escapedModel;
}