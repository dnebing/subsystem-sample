/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.dnebinger.subsystem.events.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.dnebinger.subsystem.events.model.RelatedEvent;
import com.dnebinger.subsystem.events.model.RelatedEventModel;
import com.dnebinger.subsystem.events.model.RelatedEventSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the RelatedEvent service. Represents a row in the &quot;SUBSYS_RelatedEvent&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link RelatedEventModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RelatedEventImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see RelatedEventImpl
 * @see RelatedEvent
 * @see RelatedEventModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class RelatedEventModelImpl extends BaseModelImpl<RelatedEvent>
	implements RelatedEventModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a related event model instance should use the {@link RelatedEvent} interface instead.
	 */
	public static final String TABLE_NAME = "SUBSYS_RelatedEvent";
	public static final Object[][] TABLE_COLUMNS = {
			{ "surrogateId", Types.BIGINT },
			{ "eventId", Types.BIGINT },
			{ "relatedEventId", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("surrogateId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("eventId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("relatedEventId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table SUBSYS_RelatedEvent (surrogateId LONG not null primary key,eventId LONG,relatedEventId LONG)";
	public static final String TABLE_SQL_DROP = "drop table SUBSYS_RelatedEvent";
	public static final String ORDER_BY_JPQL = " ORDER BY relatedEvent.surrogateId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SUBSYS_RelatedEvent.surrogateId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.dnebinger.subsystem.events.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.dnebinger.subsystem.events.model.RelatedEvent"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.dnebinger.subsystem.events.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.dnebinger.subsystem.events.model.RelatedEvent"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.dnebinger.subsystem.events.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.dnebinger.subsystem.events.model.RelatedEvent"),
			true);
	public static final long EVENTID_COLUMN_BITMASK = 1L;
	public static final long SURROGATEID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static RelatedEvent toModel(RelatedEventSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		RelatedEvent model = new RelatedEventImpl();

		model.setSurrogateId(soapModel.getSurrogateId());
		model.setEventId(soapModel.getEventId());
		model.setRelatedEventId(soapModel.getRelatedEventId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<RelatedEvent> toModels(RelatedEventSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<RelatedEvent> models = new ArrayList<RelatedEvent>(soapModels.length);

		for (RelatedEventSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.dnebinger.subsystem.events.service.util.ServiceProps.get(
				"lock.expiration.time.com.dnebinger.subsystem.events.model.RelatedEvent"));

	public RelatedEventModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _surrogateId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSurrogateId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _surrogateId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return RelatedEvent.class;
	}

	@Override
	public String getModelClassName() {
		return RelatedEvent.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("surrogateId", getSurrogateId());
		attributes.put("eventId", getEventId());
		attributes.put("relatedEventId", getRelatedEventId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long surrogateId = (Long)attributes.get("surrogateId");

		if (surrogateId != null) {
			setSurrogateId(surrogateId);
		}

		Long eventId = (Long)attributes.get("eventId");

		if (eventId != null) {
			setEventId(eventId);
		}

		Long relatedEventId = (Long)attributes.get("relatedEventId");

		if (relatedEventId != null) {
			setRelatedEventId(relatedEventId);
		}
	}

	@JSON
	@Override
	public long getSurrogateId() {
		return _surrogateId;
	}

	@Override
	public void setSurrogateId(long surrogateId) {
		_surrogateId = surrogateId;
	}

	@JSON
	@Override
	public long getEventId() {
		return _eventId;
	}

	@Override
	public void setEventId(long eventId) {
		_columnBitmask |= EVENTID_COLUMN_BITMASK;

		if (!_setOriginalEventId) {
			_setOriginalEventId = true;

			_originalEventId = _eventId;
		}

		_eventId = eventId;
	}

	public long getOriginalEventId() {
		return _originalEventId;
	}

	@JSON
	@Override
	public long getRelatedEventId() {
		return _relatedEventId;
	}

	@Override
	public void setRelatedEventId(long relatedEventId) {
		_relatedEventId = relatedEventId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			RelatedEvent.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public RelatedEvent toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (RelatedEvent)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RelatedEventImpl relatedEventImpl = new RelatedEventImpl();

		relatedEventImpl.setSurrogateId(getSurrogateId());
		relatedEventImpl.setEventId(getEventId());
		relatedEventImpl.setRelatedEventId(getRelatedEventId());

		relatedEventImpl.resetOriginalValues();

		return relatedEventImpl;
	}

	@Override
	public int compareTo(RelatedEvent relatedEvent) {
		long primaryKey = relatedEvent.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof RelatedEvent)) {
			return false;
		}

		RelatedEvent relatedEvent = (RelatedEvent)obj;

		long primaryKey = relatedEvent.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		RelatedEventModelImpl relatedEventModelImpl = this;

		relatedEventModelImpl._originalEventId = relatedEventModelImpl._eventId;

		relatedEventModelImpl._setOriginalEventId = false;

		relatedEventModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<RelatedEvent> toCacheModel() {
		RelatedEventCacheModel relatedEventCacheModel = new RelatedEventCacheModel();

		relatedEventCacheModel.surrogateId = getSurrogateId();

		relatedEventCacheModel.eventId = getEventId();

		relatedEventCacheModel.relatedEventId = getRelatedEventId();

		return relatedEventCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{surrogateId=");
		sb.append(getSurrogateId());
		sb.append(", eventId=");
		sb.append(getEventId());
		sb.append(", relatedEventId=");
		sb.append(getRelatedEventId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.dnebinger.subsystem.events.model.RelatedEvent");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>surrogateId</column-name><column-value><![CDATA[");
		sb.append(getSurrogateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventId</column-name><column-value><![CDATA[");
		sb.append(getEventId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>relatedEventId</column-name><column-value><![CDATA[");
		sb.append(getRelatedEventId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = RelatedEvent.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			RelatedEvent.class
		};
	private long _surrogateId;
	private long _eventId;
	private long _originalEventId;
	private boolean _setOriginalEventId;
	private long _relatedEventId;
	private long _columnBitmask;
	private RelatedEvent _escapedModel;
}